% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/methods_insert.R, R/ds_fibonacci_heap.R,
%   R/ds_hashmap.R, R/ds_queue.R, R/ds_stack.R
\docType{methods}
\name{insert}
\alias{insert}
\alias{insert,fibonacci_heap,ANY,ANY-method}
\alias{insert,hashmap,ANY,ANY-method}
\alias{insert,queue,ANY,missing-method}
\alias{insert,stack,ANY,missing-method}
\title{Add elements to an object}
\usage{
insert(obj, x, y)

\S4method{insert}{fibonacci_heap,ANY,ANY}(obj, x, y)

\S4method{insert}{hashmap,ANY,ANY}(obj, x, y)

\S4method{insert}{queue,ANY,missing}(obj, x, y = "missing")

\S4method{insert}{stack,ANY,missing}(obj, x, y = "missing")
}
\arguments{
\item{obj}{object to insert into}

\item{x}{the values/keys to insert into}

\item{y}{values to be inserted which are required for some datastructures}
}
\value{
returns \code{obj} with inserted values
}
\description{
Adds keys or <key, value> pairs to an object and returns the
 object. Depending on the datastructure used, either only keys are required
 or pairs of <keys, values>.
}
\examples{
 # insert to a fibonacci_heap with <character, double> nodes
 fibonacci_heap <- new("fibonacci_heap", "numeric", "double")

 fibonacci_heap <- insert(fibonacci_heap, 1.0, "test")

 fibonacci_heap[rnorm(5)] <- 1:5

 hashmap <- new("hashmap", "character", "integer")

 hashmap <- insert(hashmap, "test", 1)

 hashmap[paste0("k", 1:10)] <- 1:10

 # insert to a queue with <character> elements
 queue <- new("queue", "character")

 queue <- insert(queue, "test")
 # insert to a stack with <character> elements
 stack <- new("stack", "character")

 stack <- insert(stack, "test")
}
